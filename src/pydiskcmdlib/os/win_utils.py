import uuid
import ctypes

class WinEvent(object):
    def __init__(self, 
                 EventAttributes,
                 ManualReset: bool,
                 InitialState: bool,
                 Name: str,
                 ):
        self._lpEventAttributes = EventAttributes
        self._bManualReset = ManualReset
        self._bInitialState = InitialState
        if Name:
            self._lpName = ctypes.pointer(ctypes.create_string_buffer(Name.encode()))
        else:
            self._lpName = None
        ##
        self.__kernel32 = None
        self.__eventHandle = None
        ##
        self.create()

    def __del__(self):
        self.close() 

    def __repr__(self) -> str:
        return f"WinEvent({self._lpEventAttributes}, {self._bManualReset}, {self._bInitialState}, {self._lpName})"

    @property
    def _kernel32(self):
        # Opens the Kernel32.dll, which can be quite a slow process, and
        # saves it for future use.
        """
        Opens the Kernel32.dll, which can be quite a slow process, and
        saves it for future use.

        :return: windows kernel32
        """
        if self.__kernel32 is None:
            self.__kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
        return self.__kernel32

    @property
    def lpEventAttributes(self):
        return self._lpEventAttributes

    @property
    def bManualReset(self):
        return self._bManualReset

    @property
    def bInitialState(self):
        return self._bInitialState

    @property
    def lpName(self):
        return self._lpName

    @property
    def eventHandle(self):
        return self.__eventHandle

    def create(self):
        if self.__eventHandle is None:
            self.__eventHandle = self._kernel32.CreateEventW(self.lpEventAttributes,
                                                             self.bManualReset,
                                                             self.bInitialState,
                                                             self.lpName,
                                                             )
            if not self.__eventHandle:
                raise ctypes.WinError(ctypes.get_last_error())

    def close(self):
        if self.__eventHandle is not None:
            self._kernel32.CloseHandle(self.__eventHandle)
            self.__eventHandle = None


def getUniqueName():
    # TODO: Only UUID for now.
    # Choose name for event. We suggest obtaining it from GUID generated by 
    # Windows* â€“ that will make name unique and will exclude possible errors while 
    # trying to create new event with name already in use.
    return uuid.uuid4().hex
